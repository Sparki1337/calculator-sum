from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
bot = Bot(token="7813948080:AAGH0qdzgzJdWYl80wYiSp5omPcm95zIOYo")
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_keyboard():
    buttons = [
        [KeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç")],
        [KeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
        "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–¥—Å—á–µ—Ç–∞\n"
        "üîÑ –û—á–∏—Å—Ç–∏—Ç—å - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ",
        reply_markup=get_keyboard()
    )

@dp.message(lambda message: message.text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å")
async def clear_command(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data[user_id] = {
            'count': 0,
            'values': {}
        }
    await message.reply("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=get_keyboard())

@dp.message(lambda message: message.text == "üìù –ù–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç")
async def new_count(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        'count': 0,
        'values': {}
    }
    await message.reply(
        "–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Å—á–µ—Ç!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - —á–∏—Å–ª–æ",
        reply_markup=get_keyboard()
    )

def parse_line(line):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ç–∏—Ä–µ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
    parts = line.split('-')
    if len(parts) >= 2:
        name = parts[0].strip()
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–∏—Ä–µ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        value_part = '-'.join(parts[1:]).strip()
        # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
        try:
            value = int(value_part)
            return name, value
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –∏—â–µ–º —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            numbers = re.findall(r'-?\d+', value_part)
            if numbers:
                return name, int(numbers[-1])
    return None, None

@dp.message()
async def process_message(message: types.Message):
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {
            'count': 0,
            'values': {}
        }
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_data[user_id]['count'] += 1
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = message.text.split('\n')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for line in lines:
        line = line.strip()
        if not line:
            continue
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏
        name, value = parse_line(line)
        if name and value is not None:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
            if name in user_data[user_id]['values']:
                user_data[user_id]['values'][name] += value
            else:
                user_data[user_id]['values'][name] = value
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = "–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
    for name, value in user_data[user_id]['values'].items():
        response += f"{name}: {value}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_count = user_data[user_id]['count']
    if msg_count <= 6:
        response += f"\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {msg_count} –∏–∑ 6 —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        if msg_count == 6:
            response += "\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 6 —Å–æ–æ–±—â–µ–Ω–∏–π. –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—Å—á–µ—Ç."
    
    if msg_count > 6:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
        user_data[user_id] = {
            'count': 1,
            'values': {}
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        for line in lines:
            line = line.strip()
            if not line:
                continue
            name, value = parse_line(line)
            if name and value is not None:
                user_data[user_id]['values'][name] = value
        
        response = "–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –æ—Ç—Å—á–µ—Ç.\n\n–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for name, value in user_data[user_id]['values'].items():
            response += f"{name}: {value}\n"
        response += f"\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 1 –∏–∑ 6 —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    await message.reply(response, reply_markup=get_keyboard())

async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main()) 